#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('rest:server');
const config = require('config');
const logger = require('../common/logger')

// HTTP 設定
const http = require('http');

// HTTPS 設定
// var https = require('https');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.port);
app.set('port', port);
// app.set('port', (process.env.PORT || 5000));

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// HTTPS サーバの作成
// var fs = require('fs');
// var options = {
//   key: fs.readFileSync('./certs/localhost.key'),
//   cert: fs.readFileSync('./certs/localhost.pem'),
//   rejectUnauthorized: false
// };
// var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

// if (process.setuid && process.setgid) {
//   server.listen(port, '0.0.0.0', function () {
//     process.setuid(config.ownerId);
//     process.setgid(config.groupId);
//   });
// } else {
server.listen(port, '0.0.0.0', function () {
  logger.info("Node app is running at localhost:" + app.get('port'))
});
// }
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
